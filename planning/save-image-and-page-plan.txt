LP-INVESTIGATOR: IMAGE AND PAGE CONTENT STORAGE PLAN
=====================================================

PROJECT OVERVIEW
----------------
Enhance LP-Investigator Chrome extension to capture and store:
- Screenshots of visited pages
- Extracted text content
- Key images from pages
- Metadata and timestamps

TECHNICAL ARCHITECTURE
----------------------

Storage Design:
- Chrome.storage.local: Metadata, URLs, and IndexedDB references
- IndexedDB: Binary data (images, screenshots) and large text content
- Hybrid approach for optimal performance

Data Structure:
- Folders contain enhanced URL entries
- Each URL entry references content in IndexedDB
- Content includes screenshots, text, and extracted images

IMPLEMENTATION PHASES
---------------------

PHASE 1: Foundation Setup (Week 1)
----------------------------------
1. Update manifest.json permissions
   - Add "activeTab", "scripting", "host_permissions"
   - Maintain existing "tabs" and "storage"

2. Create IndexedDB wrapper module
   - Initialize database with versioning
   - Define object stores for content
   - Implement CRUD operations
   - Add error handling and fallbacks

3. Update storage schema
   - Migrate existing folder structure
   - Add content reference fields
   - Implement backward compatibility

4. Create content capture service
   - Basic architecture for content extraction
   - Message passing between components
   - Queue system for capture tasks

PHASE 2: Text Content Capture (Week 2)
--------------------------------------
1. Develop content script
   - Extract page title and meta description
   - Capture main text content
   - Get Open Graph data
   - Extract heading structure

2. Text processing pipeline
   - Clean and sanitize HTML
   - Remove scripts and styles
   - Extract readable text
   - Compress for storage

3. Storage integration
   - Save text to IndexedDB
   - Update URL metadata
   - Link content to folders

4. UI updates for text display
   - Show text preview in popup
   - Add text search capability
   - Display extraction status

PHASE 3: Screenshot Capture (Week 3)
------------------------------------
1. Implement screenshot service
   - Capture visible viewport
   - Generate thumbnails
   - Handle capture errors

2. Full page screenshot (stretch goal)
   - Scroll and capture sections
   - Stitch images together
   - Handle dynamic content

3. Image optimization
   - Convert to WebP format
   - Multiple resolution options
   - Compression settings

4. UI for screenshot viewing
   - Thumbnail grid view
   - Full image modal
   - Download options

PHASE 4: Advanced Features (Week 4)
-----------------------------------
1. Image extraction from pages
   - Identify key images (hero, og:image)
   - Download and store locally
   - Track image sources

2. Storage management
   - Implement storage quotas
   - FIFO deletion policy
   - Storage usage indicators
   - Cleanup tools

3. Export enhancements
   - Export with embedded content
   - Multiple format options
   - Selective export

4. Performance optimization
   - Lazy loading
   - Background processing
   - Caching layer

TECHNICAL REQUIREMENTS
----------------------

New Files:
- content-script.js: DOM extraction
- indexeddb-service.js: Database operations
- capture-service.js: Screenshot/content capture
- storage-migration.js: Schema updates

Updated Files:
- manifest.json: New permissions
- background.js: Capture orchestration
- popup.js: Enhanced UI
- popup.html: New UI elements

Dependencies:
- No external libraries initially
- Consider LZ-string for compression
- Consider DOMPurify for sanitization

TESTING PLAN
------------

Unit Tests:
- IndexedDB operations
- Content extraction
- Storage migration
- Data compression

Integration Tests:
- Full capture workflow
- Storage limits
- Export functionality
- Performance benchmarks

Manual Testing:
- Various website types
- Large data sets
- Edge cases (errors, offline)
- Cross-browser compatibility

MIGRATION STRATEGY
------------------

1. Version detection
   - Check existing data structure
   - Identify migration needs

2. Data transformation
   - Preserve existing folders/URLs
   - Add new fields with defaults
   - Maintain backward compatibility

3. Progressive enhancement
   - Features work with old data
   - New data includes enhanced content
   - No data loss during migration

STORAGE CONSIDERATIONS
----------------------

Limits:
- IndexedDB: ~50% of available disk
- Chrome.storage.local: 5MB
- Per-folder soft limit: 100MB
- Warning at 80% capacity

Optimization:
- Text compression (70% reduction)
- Image format conversion
- Thumbnail generation
- Selective capture options

SECURITY & PRIVACY
------------------

Considerations:
- No sensitive data capture
- Sanitize HTML content
- Secure storage practices
- User consent for capture
- Clear data on uninstall

Excluded Content:
- Password fields
- Payment information
- Private browsing sessions
- Secure (banking) sites

UI/UX ENHANCEMENTS
------------------

New UI Elements:
- Content toggle switches
- Storage usage meter
- Preview thumbnails
- Search functionality
- Batch operations

Settings:
- Capture preferences
- Quality settings
- Storage limits
- Auto-cleanup rules

DELIVERABLES
------------

Week 1:
- Updated manifest and permissions
- IndexedDB service module
- Basic storage migration

Week 2:
- Content script implementation
- Text extraction working
- Updated popup UI

Week 3:
- Screenshot capture functional
- Thumbnail generation
- Image viewer UI

Week 4:
- Storage management tools
- Export with content
- Performance optimizations
- Documentation

SUCCESS METRICS
---------------

Technical:
- <3s capture time per page
- <100ms UI response time
- 90% compression ratio for text
- Zero data loss during migration

User Experience:
- One-click capture toggle
- Instant preview access
- Intuitive storage management
- Reliable export function

RISKS & MITIGATIONS
-------------------

Risk: Storage quota exceeded
Mitigation: Implement quotas and cleanup

Risk: Slow capture performance
Mitigation: Queue system and background processing

Risk: Memory issues with large images
Mitigation: Stream processing and size limits

Risk: Complex migration fails
Mitigation: Backup and rollback mechanism

FUTURE ENHANCEMENTS
-------------------

Potential Features:
- OCR for image text
- Page change detection
- Annotation tools
- Cloud backup option
- Advanced search filters
- Batch processing
- API for external tools
- Mobile companion app

END OF PLAN